# General flow:
# 1. create a release/VERSION branch
# 2. commit&push changed version numbers in the pom.xmls (sigh, but maven forces us to)
# 3. build the binaries from that commit
# 4. update the download-url and checksum of the windows binary in the bazel module
# 5. commit
# 6. merge back into main, tag that as the final release

name: Create Release
run-name: Release ${{ inputs.version }}
on:
  workflow_dispatch:
    inputs:
      version:
        description: "The version number, e.g. 1.4.2"
        required: true
        type: string
      from-branch:
        description: "The branch on which to create the commit"
        required: true
        type: string
        default: "main"
      make-latest:
        description: "Mark this as the latest release"
        required: true
        type: boolean
        default: true

permissions:
  contents: write
  actions: read

jobs:
  prepare-build:
    runs-on: ubuntu-22.04
    outputs:
      tag: "${{ steps.determine-refs.outputs.tag }}"
      release-branch: "${{ steps.determine-refs.outputs.branch }}"
      commit-to-build: "${{ steps.update-versions.outputs.commit-to-build }}"
    steps:
      - name: checkout
        uses: actions/checkout@v4.2.0
        with:
          ref: ${{ inputs.from-branch }}
          fetch-depth: 0
          fetch-tags: 'true'
      - name: check for existing tag
        id: determine-refs
        shell: bash
        run: |
          git fetch --tags
          RELEASE_TAG="v${{ inputs.version }}"
          echo "tag=$RELEASE_TAG" >> "$GITHUB_OUTPUT"
          if [[ "$(git tag --list $RELEASE_TAG)" == "$RELEASE_TAG" ]]
          then
            echo "ERROR: the tag $RELEASE_TAG already exists, cannot release twice."
            exit 1
          fi
          
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com"
          RELEASE_BRANCH="release/${{ inputs.version }}"
          echo "branch=$RELEASE_BRANCH" >> "$GITHUB_OUTPUT"
          git checkout -b "$RELEASE_BRANCH"
          git push --set-upstream origin "$RELEASE_BRANCH"
      - name: update versions in source
        id: update-versions
        run: |
          mvn -B versions:set "-DnewVersion=${{ inputs.version }}" -DgenerateBackupPoms=false
          git add pom.xml
          git add "**/pom.xml"
          git commit -m "[RELEASE] Set version to ${{ inputs.version }}"
          git remote -v
          git push
          echo "commit-to-build=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"
  build-releasable-binaries:
    uses: ./.github/workflows/build-emerge.yaml
    needs: prepare-build
    with:
      kotlin-ref: "${{ needs.prepare-build.outputs.commit-to-build }}"
  set-self-references:
    runs-on: ubuntu-22.04
    needs:
      - prepare-build
      - build-releasable-binaries
    outputs:
      windows-final-filename: "${{ steps.update-bazel.outputs.windows-final-filename }}"
    steps:
      - name: checkout release branch
        uses: actions/checkout@v4.2.0
        with:
          ref: ${{ needs.prepare-build.outputs.release-branch }}
          fetch-depth: 0
          fetch-tags: 'true'
      - name: configure git
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com"
      - name: update bazel module
        id: update-bazel
        run: |
          WINDOWS_FINAL_FILENAME="emerge-toolchain-windows-x86_64-${{ inputs.version }}.zip"
          echo "windows-final-filename=$WINDOWS_FINAL_FILENAME" >> "$GITHUB_OUTPUT"
          ESCAPED_REPOSITORY="$(echo '${{ github.repository }}' | sed 's/\//\\\//')"
          sed \
            --in-place \
            --regexp-extended \
            's/_WINDOWS_DOWNLOAD_URL\s*=\s*".+?"/_WINDOWS_DOWNLOAD_URL = "https:\/\/github.com\/'$ESCAPED_REPOSITORY'\/releases\/download\/${{ needs.prepare-build.outputs.tag }}\/'$WINDOWS_FINAL_FILENAME'"/' \
            bazel/rules_emerge/MODULE.bazel
          sed \
            --in-place \
            --regexp-extended \
            's/_WINDOWS_SHA256\s*=\*".+?"/_WINDOWS_SHA256 = "${{ needs.build-releasable-binaries.outputs.windows-zip-sha256 }}"/' \
            bazel/rules_emerge/MODULE.bazel
          
          git add bazel/rules_emerge/MODULE.bazel
          git commit -m "[RELEASE] Update windows archive reference in bazel/rules_emerge"
          
          # wrap up release branch
          git checkout "${{ inputs.from-branch }}"
          git merge --ff-only "${{ needs.prepare-build.outputs.release-branch }}"
          git push
          git branch -D "${{ needs.prepare-build.outputs.release-branch }}"
          git push origin ":${{ needs.prepare-build.outputs.release-branch }}"
          git tag "${{ needs.prepare-build.outputs.tag }}"
          git push --tags
  deb-package:
    runs-on: ubuntu-24.04
    needs:
      - prepare-build
      - build-releasable-binaries
    outputs:
      deb-filename: "${{ steps.deb-package.outputs.deb_file_name }}"
    steps:
      - name: install build dependencies
        run: sudo apt-get install moreutils
      - name: checkout source for debian package
        uses: actions/checkout@v4.2.0
        with:
          ref: "${{ needs.tag-release.outputs.tag }}"
          sparse-checkout: dist/linux/deb
          path: repository
      - name: download tarball
        uses: actions/download-artifact@v4.1.8
        with:
          run-id: "${{ needs.build-releasable-binaries.run-id }}"
          name: tarball
      - name: make debian package
        id: deb-package
        run: |
          # set variables, also for envsubst in the package files
          export TOOLCHAIN_VERSION="${{ inputs.version }}"
          export DEB_NAME="emerge-toolchain-${TOOLCHAIN_VERSION}"
          export DEB_VERSION="1.0.0"
          export RELEASE_REF="refs/tags/${{ needs.tag-release.outputs.tag }}"
          export RELEASE_COMMIT_SHA="${{ needs.tag-release.outputs.tag_commit_sha}}"
          mkdir -p "deb-package/$DEB_NAME" && pushd $_
            mkdir -p "opt/emerge-toolchain/${TOOLCHAIN_VERSION}" && pushd $_
              tar --extract --preserve-permissions --file "${{ github.workspace }}/${{ needs.build-releasable-binaries.outputs.tarball-filename }}"
            popd
            cp -ar "${{ github.workspace }}/repository/dist/linux/deb/." .
            envsubst < DEBIAN/control | sponge DEBIAN/control
            envsubst < DEBIAN/postinst | sponge DEBIAN/postinst
            sudo chown -R root DEBIAN
            sudo chgrp -R root DEBIAN
            sudo chmod uga=rx DEBIAN/postinst
          popd
          dpkg --build "deb-package/$DEB_NAME"
          echo "deb_file_name=${DEB_NAME}.deb" >> "$GITHUB_OUTPUT"
          echo "deb_file_path=${{ github.workspace }}/deb-package/${DEB_NAME}.deb" >> "$GITHUB_OUTPUT"
      - name: archive debian package
        uses: actions/upload-artifact@v4
        with:
          name: deb
          path: "${{ steps.deb-package.outputs.deb_file_path }}"

  create-release:
    runs-on: ubuntu-22.04
    needs:
      - prepare-build
      - build-releasable-binaries
      - deb-package
      - set-self-references
    steps:
      - name: download tarball
        uses: actions/download-artifact@v4.1.8
        with:
          run-id: "${{ needs.build-releasable-binaries.run-id }}"
          name: tarball
      - name: rename tarball for release
        id: release-tarball
        run: |
          TARBALL_PATH="${{ github.workspace }}/${{ needs.build-releasable-binaries.outputs.tarball-filename }}"
          TARBALL_BASENAME="$(basename "$TARBALL_PATH")"
          TARBALL_EXT="${TARBALL_BASENAME#*.}"
          RELEASE_TARBALL_NAME="emerge-toolchain-${{ inputs.version }}.$TARBALL_EXT"
          mv "$TARBALL_PATH" "$RELEASE_TARBALL_NAME"
          echo "release_tarball_path=${{ github.workspace }}/$RELEASE_TARBALL_NAME" >> "$GITHUB_OUTPUT"
      - name: download deb file
        uses: actions/download-artifact@v4.1.8
        with:
          name: deb
      - name: download windows archive
        uses: actions/download-artifact@v4.1.8
        with:
          run-id: "${{ needs.build-releasable-binaries.run-id }}"
          name: windows-zip
      - name: rename windows zip for release
        run: |
          mv "${{ needs.build-releasable-binaries.outputs.windows-zip-filename }}" "${{ needs.set-self-references.outputs.windows-final-filename }}"
      - name: create release
        uses: softprops/action-gh-release@v2.0.8
        with:
          tag_name: "${{ needs.prepare-build.outputs.tag }}"
          name: "${{ inputs.version }}"
          fail_on_unmatched_files: true
          make_latest: "${{ inputs.make-latest }}"
          files: |
            ${{ steps.release-tarball.outputs.release_tarball_path }}
            ${{ github.workspace }}/${{ needs.deb-package.outputs.deb-filename }}
            ${{ github.workspace }}/${{ needs.set-self-references.outputs.windows-final-filename }}

# Copied from github.com/llvm/llvm-project Actions

env:
  LLVM_REF: llvmorg-19.1.1

name: "Build LLVM for Windows"
on:
  workflow_dispatch:
  workflow_call:

jobs:
  build-llvm-windows:
    name: "Build LLVM x86_64-unknown-windows-msvc"
    runs-on: windows-2022
    env:
      LLVM_INSTALL_PATH: ${{ github.workspace }}/llvm-install
      LLVM_BUILD_PATH: ${{ github.workspace }}/llvm-build
    steps:
      - name: Verify x86_64 host
        shell: pwsh
        # https://learn.microsoft.com/en-us/windows/win32/cimwin32prov/win32-processor
        run: |
          if ((Get-WmiObject win32_processor).Architecture -ne 9) {
            echo "Not running on an x86_64 machine, cannot build for x86_64!"
            exit 1
          }
      - name: cache
        id: cache
        uses: actions/cache@v4.1.0
        with:
          path: |
            ${{ env.LLVM_INSTALL_PATH }}
          key: llvm-built-${{ env.LLVM_REF }}
      - name: Setup Windows
        if: steps.cache.outputs.cache-hit != 'true'
        uses: llvm/actions/setup-windows@main
        with:
          arch: amd64
      - name: Fetch LLVM sources
        if: steps.cache.outputs.cache-hit != 'true'
        uses: actions/checkout@v4
        with:
          repository: llvm/llvm-project
          ref: ${{ env.LLVM_REF }}
          fetch-depth: 2
      - name: Setup ccache
        if: steps.cache.outputs.cache-hit != 'true'
        uses: hendrikmuhs/ccache-action@v1
        with:
          max-size: 500M
          variant: sccache
          key: precommit-windows
      - name: Configure LLVM
        if: steps.cache.outputs.cache-hit != 'true'
        shell: bash
        run: |
          sed -i '/find_package(Git/d' llvm/cmake/modules/AddLLVM.cmake llvm/cmake/modules/VersionFromVCS.cmake
          sed -i '/Generating libLLVM is not supported on MSVC/d' llvm/tools/llvm-shlib/CMakeLists.txt
          sed -i 's/if (NOT Python3_EXECUTABLE/if (TRUE/g' clang/lib/Tooling/CMakeLists.txt
          cmake \
            -G "Ninja" \
            -S llvm \
            -B $LLVM_BUILD_PATH \
            -DCMAKE_INSTALL_PREFIX=$LLVM_INSTALL_PATH \
            -DCMAKE_EXE_LINKER_FLAGS="/FORCE:MULTIPLE" \
            -DCMAKE_SHARED_LINKER_FLAGS="/FORCE:MULTIPLE" \
            -DLLVM_TARGETS_TO_BUILD=X86 \
            -DLLVM_ENABLE_DIA_SDK=OFF \
            -DLLVM_ENABLE_LIBXML2=OFF \
            -DLLVM_INCLUDE_TESTS=OFF \
            -DPYTHON_EXECUTABLE="$(where python.exe | head -1)" \
            -DLLVM_ENABLE_ZSTD=OFF \
            -DLLVM_ENABLE_PROJECTS="llvm;lld" \
            -DLLVM_ENABLE_RUNTIMES=libunwind \
            -DLIBUNWIND_ENABLE_SHARED=false
      - name: Build LLVM
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          cd "${{ env.LLVM_BUILD_PATH }}"
          ninja
          ninja install
      - name: Collect artifacts
        uses: actions/upload-artifact@v4
        with:
          name: llvm-windows-x86_64
          path: |
            ${{ env.LLVM_INSTALL_PATH }}

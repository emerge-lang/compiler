name: build emerge compiler
run-name: Build & Test the Emerge compiler
on:
  push:
    branches:
      - '**'
      - '!release/*'
  workflow_call:
    outputs:
      dist-tarball-artifact-name:
        description: "Name of the artifact on this workflow run that has the distributable binaries"
        value: ${{ jobs.linux-all-arch-tarball.outputs.artifact-name }}
      run-id:
        description: "The run-id of this workflow"
        value: ${{ github.run_id }}

env:
  GLIBC_SOURCE_BALL_URL: "http://mirror.dogado.de/gnu/libc/glibc-2.38.tar.bz2"
  GCC_GIT_REF: "releases/gcc-14.1.0"
  LIBUNWIND_GIT_REF: "v1.8.1"
  LLVM_VERSION: "18"

jobs:
  build-glibc-x86_64:
    name: "build glibc for x86_64-pc-linux-gnu"
    runs-on: ubuntu-latest
    steps:
      - id: cache-glibc
        uses: actions/cache@v4.1.0
        with:
          path: |
            ${{ github.workspace }}/glibc-build/csu
            ${{ github.workspace }}/glibc-build/libc.so
          key: glibc-x86_64-pc-linux-gnu-${{ env.GLIBC_SOURCE_BALL_URL }}
      - name: build glibc
        if: steps.cache-glibc.outputs.cache-hit != 'true'
        run: |
          sudo apt-get install bison
          curl "$GLIBC_SOURCE_BALL_URL" | tar --bzip2 --extract
          mv glibc-2.38 glibc-source
          mkdir glibc-build
          cd glibc-build
          $GITHUB_WORKSPACE/glibc-source/configure --host=x86_64-pc-linux-gnu --target=x86_64-pc-linux-gnu --prefix=$GITHUB_WORKSPACE/glibc-install
          N_PHYSICAL_CORES=$(cat /proc/cpuinfo | grep -E 'cpu cores\s*:' | head -1 | sed -E 's/^.*([0-9]+)$/\1/')
          make -j $N_PHYSICAL_CORES
  build-gcc-x86_64:
    name: "build gcc for x86_64-pc-linux-gnu"
    runs-on: ubuntu-latest
    steps:
      - id: cache-gcc
        uses: actions/cache@v4.1.0
        with:
          path: |
            ${{ github.workspace }}/gcc-build/x86_64-pc-linux-gnu/libgcc
          key: gcc-x86_64-pc-linux-gnu-${{ env.GCC_GIT_REF }}
      - name: checkout GCC source
        if: steps.cache-gcc.outputs.cache-hit != 'true'
        uses: actions/checkout@v4
        with:
          repository: gcc-mirror/gcc
          ref: ${{ env.GCC_GIT_REF }}
          path: gcc-source
      - name: build GCC
        if: steps.cache-gcc.outputs.cache-hit != 'true'
        run: |
          sudo apt-get install flex
          cd gcc-source
          contrib/download_prerequisites
          cd $GITHUB_WORKSPACE
          mkdir gcc-build
          cd gcc-build
          $GITHUB_WORKSPACE/gcc-source/configure --host=x86_64-pc-linux-gnu --target=x86_64-pc-linux-gnu --disable-multilib --enable-languages=c
          N_PHYSICAL_CORES=$(cat /proc/cpuinfo | grep -E 'cpu cores\s*:' | head -1 | sed -E 's/^.*([0-9]+)$/\1/')
          make -j $N_PHYSICAL_CORES
  build-libunwind-x86_64:
    name: "build nongnu libunwind for x86_64-pc-linux-gnu"
    runs-on: ubuntu-latest
    steps:
      - id: cache-libunwind
        uses: actions/cache@v4.1.0
        with:
          path: |
            ${{ github.workspace }}/libunwind-install/lib
          key: libunwind-x86_64-pc-linux-gnu-${{ env.LIBUNWIND_GIT_REF }}
      - name: checkout libunwind source
        if: steps.cache-libunwind.outputs.cache-hit != 'true'
        uses: actions/checkout@v4
        with:
          repository: libunwind/libunwind
          ref: ${{ env.LIBUNWIND_GIT_REF }}
          path: ${{ github.workspace }}/libunwind-source
      - name: build libunwind
        if: steps.cache-libunwind.outputs.cache-hit != 'true'
        run: |
          cd ${{ github.workspace }}/libunwind-source
          autoreconf -i
          ./configure "--prefix=${{ github.workspace }}/libunwind-install"
          make
          make install
  emerge-toolchain-maven:
    runs-on: ubuntu-22.04
    name: emerge compiler maven verify
    steps:
      - id: cache-emerge-toolchain-maven
        uses: actions/cache@v4.1.0
        with:
          path: |
            ${{ github.workspace }}/toolchain/target/toolchain.jar
          key: toolchain-runnable-jar-292c1ed71852899d3b80bf567d11a1d41e8fa8f0 # TODO: replace hash with ${{ github.sha }}
          #enableCrossOsArchive: true -- this causes the cache-hit output to not work properly - buggy mess
      - name: checkout
        if: steps.cache-emerge-toolchain-maven.outputs.cache-hit != 'true'
        uses: actions/checkout@v4
      - name: Set up JDK 21
        if: steps.cache-emerge-toolchain-maven.outputs.cache-hit != 'true'
        uses: actions/setup-java@v4.0.0
        with:
          java-version-file: .java-version
          distribution: zulu
          cache: maven
      - name: install llvm
        if: steps.cache-emerge-toolchain-maven.outputs.cache-hit != 'true'
        run: |
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh "${{ env.LLVM_VERSION }}"
      - name: mvn clean verify
        if: steps.cache-emerge-toolchain-maven.outputs.cache-hit != 'true'
        run: mvn "-Demerge.llvm-tests.llvm-install-dir=/usr/lib/llvm-18" -B clean verify
  linux-all-arch-tarball:
    name: Linux tarball for all Architectures
    runs-on: ubuntu-20.04
    needs:
      - build-gcc-x86_64
      - build-glibc-x86_64
      - build-libunwind-x86_64
      - emerge-toolchain-maven
    outputs:
      artifact-name: ${{ env.TARBALL_NAME }}
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: get C-runtime binaries from glibc
        uses: actions/cache/restore@v4
        with:
          path: |
            ${{ github.workspace }}/glibc-build/csu
            ${{ github.workspace }}/glibc-build/libc.so
          key: glibc-x86_64-pc-linux-gnu-${{ env.GLIBC_SOURCE_BALL_URL }}
          fail-on-cache-miss: true
      - name: get C-runtime binaries from gcc
        uses: actions/cache/restore@v4
        with:
          path: |
            ${{ github.workspace }}/gcc-build/x86_64-pc-linux-gnu/libgcc
          key: gcc-x86_64-pc-linux-gnu-${{ env.GCC_GIT_REF }}
          fail-on-cache-miss: true
      - name: get libunwind binaries
        uses: actions/cache/restore@v4
        with:
          path: |
            ${{ github.workspace }}/libunwind-install/lib
          key: libunwind-x86_64-pc-linux-gnu-${{ env.LIBUNWIND_GIT_REF }}
          fail-on-cache-miss: true
      - name: get runnable toolchain jar
        uses: actions/cache/restore@v4
        with:
          path: |
            ${{ github.workspace }}/toolchain/target/toolchain.jar
          key: toolchain-runnable-jar-292c1ed71852899d3b80bf567d11a1d41e8fa8f0 # TODO: replace hash with ${{ github.sha }}
          fail-on-cache-miss: true
          enableCrossOsArchive: true
      - name: make tarball
        run: |
          set -ex
          TARBALL_NAME="emerge-toolchain-${GITHUB_SHA}.tar.gz"
          mkdir -p "${{ github.workspace }}/tarball-root" && pushd $_
          
            cp -r "${{ github.workspace }}/stdlib" .
            
            mkdir -p backends && pushd $_
              mkdir -p noop && pushd $_
                cp -r "${{ github.workspace }}/backend-api/src/main/emerge/noop-backend-platform" platform-sources
              popd
            
              mkdir -p native && pushd $_
                cp -r "${{ github.workspace }}/llvm-backend/src/main/emerge-ffi-c" .
              popd
            
              mkdir -p linux-gnu && pushd $_
                cp -r "${{ github.workspace }}/llvm-backend/src/main/emerge-linux-libc" .
                cp -r "${{ github.workspace }}/llvm-backend/src/main/emerge-platform-linux" .
              popd
            
              mkdir -p x86_64-pc-linux-gnu/lib && pushd $_
                cp "${{ github.workspace }}/libunwind-install/lib/libunwind-x86_64.a" .
                cp "${{ github.workspace }}/gcc-build/x86_64-pc-linux-gnu/libgcc/crtbeginS.o" .
                cp "${{ github.workspace }}/gcc-build/x86_64-pc-linux-gnu/libgcc/crtendS.o" .
                cp "${{ github.workspace }}/glibc-build/csu/Scrt1.o" .
                cp "${{ github.workspace }}/glibc-build/libc.so" .
              popd  
            popd
            cp "${{ github.workspace }}/distributable/"* .
          popd
          tar --create \
            --directory=tarball-root \
            --owner=root \
            --group=root \
            --mode='ug=rw,a=rX' \
            --preserve-permissions \
            --gzip \
            --format=gnu \
            . \
            > "$TARBALL_NAME"
          echo "TARBALL_NAME=${TARBALL_NAME}" >> "$GITHUB_ENV"
      - name: archive tarball
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.TARBALL_NAME }}
          path: ${{ github.workspace }}/${{ env.TARBALL_NAME }}